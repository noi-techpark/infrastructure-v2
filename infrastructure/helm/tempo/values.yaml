# values.yaml for Tempo Distributed Helm Deployment

# tempo:

# server:
#   logLevel: debug

traces:
  otlp:
    grpc:
      enabled: true

# Metrics generator config for remote write to Prometheus
metricsGenerator:
  enabled: true
# Remote write URL for sending metrics to Prometheus
  config:
    storage:
      remote_write:
        - url: http://prometheus-prometheus.monitoring.svc.cluster.local:9090/api/v1/write
    processor:
      span_metrics:
        histogram_buckets: [0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 
          1.02, 2.05, 4.10, 8.2, 16.4, 32.8, 60, 120, 300, 600, 1200, 1800, 3600]
      service_graphs:
        histogram_buckets: [0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.4, 12.8, 25.6, 51.2, 
          120, 300, 600, 1200, 1800, 3600]
        # Wait up to N seconds for potential downstream spans before finalizing the service graph edge.
        wait: 1m
    # how long after the fact a span for a trace might arrive late and still be included in metrics. (late arrival causes like network)
    metrics_ingestion_time_range_slack: 1m

# Persistent storage configuration for ingester using gp3
ingester:
  persistence:
    enabled: true
    storageClass: "gp3"
    size: 50Gi  # Adjust size as required

  persistentVolumeClaimRetentionPolicy:
    # -- Enable Persistent volume retention policy for StatefulSet
    enabled: true
    # -- Volume retention behavior when the replica count of the StatefulSet is reduced
    whenScaled: Retain
    # -- Volume retention behavior that applies when the StatefulSet is deleted
    whenDeleted: Retain
  
  config:
    trace_idle_period: 20s           # When a trace stops receiving spans, it's flushed to WAL
    max_block_duration: 30m          # Max duration before WAL block is closed
    complete_block_timeout: 15m      # How long to wait before flushing WAL to object storage
    flush_all_on_shutdown: true

# Configuration for the compactor
compactor:
  config:
    compaction:
      block_retention: "720h"        # Keep raw blocks for 30 days
      compacted_block_retention: "168h"  # Keep compacted blocks for 1 week

# Configuration for the gateway
gateway:
  # -- Specifies whether the gateway should be enabled
  enabled: true

  # Basic auth configuration
  basicAuth:
    # -- Enables basic authentication for the gateway
    enabled: true
    existingSecret: tempo-gateway-basic-auth

  # Ingress configuration to allow external Grafana access
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/enable-cors: "true"  # Enable CORS
      nginx.ingress.kubernetes.io/cors-allow-origin: "*"  # Allow requests from Grafana's domain
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"  # Allow the necessary HTTP methods
      nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"  # Allow necessary headers
    ingressClassName: nginx
    tls:
      - hosts:
          - tempo.dev.testingmachine.eu
        secretName: tls-tempo
    hosts:
      - host: tempo.dev.testingmachine.eu
        paths:
          - path: /
            pathType: Prefix

# Prometheus ServiceMonitor configuration
metaMonitoring:
  serviceMonitor:
    enabled: true
    interval: 60s

# need to enable metrics generation using overrides
overrides:
  defaults:
    metrics_generator:
      processors:
        - service-graphs
        - span-metrics